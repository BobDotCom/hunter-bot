# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  bot:
    build:
      context: .
#      privileged: true
#    networks:
#      - server-side
    extra_hosts:
      - "host.docker.internal:host-gateway"
    secrets:
      - token
      - db-password
    environment:
      - DOCKER_HOST=unix:///var/run/docker.sock
      - POSTGRES_DB=example
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
      - BOT_TOKEN_FILE=/run/secrets/token
      - HUNTER_VERSION=1.13.0
#      - BOT_PROXY_URL=http://host.docker.internal:9080 # TODO: Remove this
      - POSTGRES_HOST=db
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
#      - type: bind
#        source: ~/.docker/run/docker.sock
#        target: /var/run/docker.sock
#      - "~/.lima/docker1/sock/docker.sock:/var/run/docker.sock"
#      - "~/.docker/run:/var/run"
#      - "~/.docker/run/docker.sock:/var/run/docker.sock"

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
    depends_on:
      db:
        condition: service_healthy
  db:
    image: postgres
    restart: always
    user: postgres
#    networks:
#      - server-side
    secrets:
      - db-password
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=example
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    expose:
      - 5432
#    ports:
#      - "127.0.0.1:5432:5432"
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
#networks:
#  server-side: {}
volumes:
  db-data:
secrets:
  db-password:
    file: secrets/password.txt
  token:
    file: secrets/token.txt
